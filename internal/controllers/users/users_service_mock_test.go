// Code generated by MockGen. DO NOT EDIT.
// Source: controller.go
//
// Generated by this command:
//
//	mockgen -source=controller.go -destination=./users_service_mock_test.go -package=users
//

// Package users is a generated GoMock package.
package users

import (
	context "context"
	reflect "reflect"
	dto "user-service/domain/dto"

	gomock "go.uber.org/mock/gomock"
)

// Mockservice is a mock of service interface.
type Mockservice struct {
	ctrl     *gomock.Controller
	recorder *MockserviceMockRecorder
	isgomock struct{}
}

// MockserviceMockRecorder is the mock recorder for Mockservice.
type MockserviceMockRecorder struct {
	mock *Mockservice
}

// NewMockservice creates a new mock instance.
func NewMockservice(ctrl *gomock.Controller) *Mockservice {
	mock := &Mockservice{ctrl: ctrl}
	mock.recorder = &MockserviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockservice) EXPECT() *MockserviceMockRecorder {
	return m.recorder
}

// GetAllAdmin mocks base method.
func (m *Mockservice) GetAllAdmin(arg0 context.Context) ([]*dto.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAdmin", arg0)
	ret0, _ := ret[0].([]*dto.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAdmin indicates an expected call of GetAllAdmin.
func (mr *MockserviceMockRecorder) GetAllAdmin(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAdmin", reflect.TypeOf((*Mockservice)(nil).GetAllAdmin), arg0)
}

// GetAllCustomer mocks base method.
func (m *Mockservice) GetAllCustomer(arg0 context.Context) ([]*dto.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCustomer", arg0)
	ret0, _ := ret[0].([]*dto.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCustomer indicates an expected call of GetAllCustomer.
func (mr *MockserviceMockRecorder) GetAllCustomer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCustomer", reflect.TypeOf((*Mockservice)(nil).GetAllCustomer), arg0)
}

// GetAllUser mocks base method.
func (m *Mockservice) GetAllUser(arg0 context.Context) ([]*dto.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUser", arg0)
	ret0, _ := ret[0].([]*dto.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUser indicates an expected call of GetAllUser.
func (mr *MockserviceMockRecorder) GetAllUser(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUser", reflect.TypeOf((*Mockservice)(nil).GetAllUser), arg0)
}

// GetUserByUUID mocks base method.
func (m *Mockservice) GetUserByUUID(arg0 context.Context, arg1 string) (*dto.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUUID", arg0, arg1)
	ret0, _ := ret[0].(*dto.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUUID indicates an expected call of GetUserByUUID.
func (mr *MockserviceMockRecorder) GetUserByUUID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUUID", reflect.TypeOf((*Mockservice)(nil).GetUserByUUID), arg0, arg1)
}

// GetUserLogin mocks base method.
func (m *Mockservice) GetUserLogin(arg0 context.Context) (*dto.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserLogin", arg0)
	ret0, _ := ret[0].(*dto.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserLogin indicates an expected call of GetUserLogin.
func (mr *MockserviceMockRecorder) GetUserLogin(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserLogin", reflect.TypeOf((*Mockservice)(nil).GetUserLogin), arg0)
}

// Login mocks base method.
func (m *Mockservice) Login(arg0 context.Context, arg1 *dto.LoginRequest) (*dto.LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(*dto.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockserviceMockRecorder) Login(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*Mockservice)(nil).Login), arg0, arg1)
}

// Register mocks base method.
func (m *Mockservice) Register(arg0 context.Context, arg1 *dto.RegisterRequest) (*dto.RegisterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(*dto.RegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockserviceMockRecorder) Register(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*Mockservice)(nil).Register), arg0, arg1)
}

// Update mocks base method.
func (m *Mockservice) Update(arg0 context.Context, arg1 *dto.UpdateRequest, arg2 string) (*dto.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*dto.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockserviceMockRecorder) Update(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*Mockservice)(nil).Update), arg0, arg1, arg2)
}
